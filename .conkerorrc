// webjumps
define_webjump("aur", "http://aur.archlinux.org/packages.php?O=0&K=%s");
define_webjump("aw", "http://wiki.archlinux.org/index.php?search=%s");
define_webjump("c", "http://www.google.com/codesearch?q=%s");
define_webjump("cpan", "http://search.cpan.org/search?query=%s&mode=all");
define_webjump("d", "http://dict.leo.org/?lp=ende&lang=de&searchLoc=0&cmpType=relaxed&relink=on&sectHdr=off&spellToler=std&search=%s");
define_webjump("dj", "https://docs.djangoproject.com/search/?q=%s");
define_webjump("e", "http://www.google.com/cse?cx=004774160799092323420%3A6-ff2s0o6yi&q=%s&sa=Search&siteurl=emacswiki.org%2F", $alternative="http://www.emacswiki.org/");
define_webjump("g", "http://www.google.com/search?q=%s");
define_webjump("git", "http://www.github.com/search?q=%s");
define_webjump("o", "http://stackoverflow.com/search?q=%s");
define_webjump("p", "http://docs.python.org/search.html?q=%s");
define_webjump("s", "https://www.ixquick.com/do/search?q=%s");
define_webjump("w", "http://de.wikipedia.org/wiki/%s");
define_webjump("yt", "http://www.youtube.com/results?search_query=%s&search=Search");
read_url_handler_list = [read_url_make_default_webjump_handler("s")];

// the default page for new buffers.
homepage = "about:blank";

// remember session
require("session");
session_auto_save_auto_load = "prompt";

// no history
session_pref('browser.history_expire_days', -1);
url_completion_use_history = false;

// completions
url_completion_use_webjumps = true;
url_completion_use_bookmarks = true;

// external programs for handling various mime types.
external_content_handlers.set("application/pdf", "acroread");

// view source in your editor.
editor_shell_command="emacsclient";
view_source_use_external_editor = true;

// passwords
session_pref("signon.rememberSignons", true);
session_pref("signon.expireMasterPassword", true);

// remember form values
session_pref("browser.formfill.enable", true);

// disable scrollbars
function disable_scrollbars (buffer) {
    buffer.top_frame.scrollbars.visible = false;
}
add_hook("create_buffer_late_hook", disable_scrollbars);

// dont show download buffer
remove_hook("download_added_hook", open_download_buffer_automatically);

//
// Extensions
//

session_pref('extensions.checkCompatibility', false);
session_pref("xpinstall.whitelist.required", false);
user_pref("extensions.checkUpdateSecurity", true);

// adblock
require("adblockplus");
try { require("dom-inspector"); } catch (e) {}

/* noscript */
require("noscript");

function ns_allow_perm (url, buffer, P, allow) {
    var ns = noscript_service;
    if (allow) {
        ns.setJSEnabled(url, true);
        setObjectVisibility(buffer.document,showObject);
    } else {
        ns.setJSEnabled(url, false);
        setObjectVisibility(buffer.document,hideObject);
    }
}

interactive("ns-toggle-perm",
    "Allow a site permanently access to javascript",
    function (I) {
        var ns = noscript_service;
        var urls = [];
        var level = ns.getPref("toolbarToggle", 3);
        if (! level)
            level = 3;
        var url = ns.getQuickSite(I.buffer.document.documentURI, level);
        var url2;
        if (url) {
            urls.push(url);
            var scripts = I.buffer.document.getElementsByTagName("script");
            for (var i = 0, n = scripts.length; i < n; i++) {
                if (scripts[i].getAttribute("src")) {
                    var matches = scripts[i].getAttribute("src").split("/");
                    if (matches[0] == "http:")
                        urls.push(matches[2]);
                }
            }
            urls = unique(urls);
            urls = urls.filter(function (u) { return !ns.isJSEnabled(u); });
            while ((url2 = urls.pop())) {
                ns_allow_perm(url2, I.buffer, I.P,
                              "y" == (yield I.minibuffer.read_single_character_option(
                                  $prompt = "Allow " + url2 + "? [y/[n]]",
                                  $options = ["y", "n"])));
            }
            reload(I.buffer, I.P);
        }
    });

    
/* flashblock */
let (sheet = get_home_directory()) {
    sheet.appendRelativePath(".conkeror.d/css/flashblock.css");
    register_user_stylesheet(make_uri(sheet));
}

/*
require("content-policy");

function block_flash (content_type, content_location)
{
    var action = content_policy_reject;
    var allowed_sites = new Array("www.youtube.com",
                                  "www.vimeo.com");

    for(var i=0; i < allowed_sites.length; ++i)
    {
       if (content_location.host == allowed_sites[i])
       {
          action = content_policy_accept ;
       }
    }
    
    return action;
}

content_policy_bytype_table.object = block_flash;
add_hook("content_policy_hook", content_policy_bytype);
*/

// RSS
require("utils.js");

function subscribe_feed(I){
    var f=false;
    var document= I.buffer.document;
    var ls=document.getElementsByTagName("link");
    for(var i=0,l;l=ls[i];i++){
        var t=l.getAttribute('type');
        var r=l.getAttribute('rel');
        if(t&&(t=='application/rss+xml'||t=='application/xml+rss'||t=='application/atom+xml')&&r&&r=='alternate'){
            var h= l.getAttribute('href');
            dumpln("MUH " + h)
            if(h.indexOf('http') != 0){
                var p=(h.indexOf('/')!=0)?'/':document.location.pathname;
                h='http://'+document.location.hostname+p+h;
            }
            writeToClipboard(h);
            I.minibuffer.message("Found RSS feed " + h);
            f=true;
        }}
    if(!f) I.minibuffer.message('Oops. Can\'t find a feed.');
};
interactive("subscribe_feed", "Copy first RSS feed to clipboard", subscribe_feed);
define_key(default_global_keymap, "C-c s", "subscribe_feed");


//
// Keybindings
//

define_key(content_buffer_normal_keymap, "C-u", "view-source");
define_key(content_buffer_normal_keymap, "C-t", "find-url-new-buffer");
define_key(content_buffer_normal_keymap, "C-w", "kill-current-buffer");
define_key(content_buffer_normal_keymap, "F", "follow-new-buffer");
define_key(content_buffer_normal_keymap, "M-left", "back");
define_key(content_buffer_normal_keymap, "M-right", "forward");


// direct switch to buffers
function define_switch_buffer_key (key, buf_num) {
    define_key(default_global_keymap, key,
               function (I) {
                   switch_to_buffer(I.window,
                                    I.window.buffers.get_buffer(buf_num));
               });
};
for (let i = 0; i < 10; ++i) {
    define_switch_buffer_key("M-"+String((i+1)%10), i);
};



///
/// Mode line preferences
///

// add favicons
require("favicon");
add_hook("mode_line_hook", mode_line_adder(buffer_icon_widget), true);
read_buffer_show_icons = true;

// hide clock
remove_hook("mode_line_hook", mode_line_adder(clock_widget));

// show buffer count in modeline
add_hook("mode_line_hook", mode_line_adder(buffer_count_widget), true);

// show loading buffer count widget
add_hook("mode_line_hook", mode_line_adder(loading_count_widget), true);

// show download status
add_hook("mode_line_hook", mode_line_adder(downloads_status_widget));


///
/// Auto-hide Minibuffer
///

var minibuffer_autohide_timer = null;
var minibuffer_autohide_message_timeout = 3000; //milliseconds to show messages
var minibuffer_mutually_exclusive_with_mode_line = true;

function hide_minibuffer (window) {
    window.minibuffer.element.collapsed = true;
    if (minibuffer_mutually_exclusive_with_mode_line && window.mode_line)
        window.mode_line.container.collapsed = false;
}

function show_minibuffer (window) {
    window.minibuffer.element.collapsed = false;
    if (minibuffer_mutually_exclusive_with_mode_line && window.mode_line)
        window.mode_line.container.collapsed = true;
}

add_hook("window_initialize_hook", hide_minibuffer);
// for_each_window(hide_minibuffer); // initialize existing windows


var old_minibuffer_restore_state = (old_minibuffer_restore_state ||
                                    minibuffer.prototype._restore_state);
minibuffer.prototype._restore_state = function () {
    if (minibuffer_autohide_timer) {
        timer_cancel(minibuffer_autohide_timer);
        minibuffer_autohide_timer = null;
    }
    if (this.current_state)
        show_minibuffer(this.window);
    else
        hide_minibuffer(this.window);
    old_minibuffer_restore_state.call(this);
};

var old_minibuffer_show = (old_minibuffer_show || minibuffer.prototype.show);
minibuffer.prototype.show = function (str, force) {
    var w = this.window;
    show_minibuffer(w);
    old_minibuffer_show.call(this, str, force);
    if (minibuffer_autohide_timer)
        timer_cancel(minibuffer_autohide_timer);
    minibuffer_autohide_timer = call_after_timeout(
        function () { hide_minibuffer(w); },
        minibuffer_autohide_message_timeout);
};

var old_minibuffer_clear = (old_minibuffer_clear || minibuffer.prototype.clear);
minibuffer.prototype.clear = function () {
    if (minibuffer_autohide_timer) {
        timer_cancel(minibuffer_autohide_timer);
        minibuffer_autohide_timer = null;
    }
    if (! this.current_state)
        hide_minibuffer(this.window);
    old_minibuffer_clear.call(this);
};
