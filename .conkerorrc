// webjumps
define_webjump("aur", "http://aur.archlinux.org/packages.php?O=0&K=%s");
define_webjump("dj", "https://docs.djangoproject.com/search/?q=%s");
define_webjump("c", "http://www.google.com/codesearch?q=%s");
define_webjump("d", "http://dict.leo.org/?lp=ende&lang=de&searchLoc=0&cmpType=relaxed&relink=on&sectHdr=off&spellToler=std&search=%s");
define_webjump("e", "http://www.google.com/cse?cx=004774160799092323420%3A6-ff2s0o6yi&q=%s&sa=Search&siteurl=emacswiki.org%2F", $alternative="http://www.emacswiki.org/");
define_webjump("g", "http://www.google.com/search?q=%s");
define_webjump("o", "http://stackoverflow.com/search?q=%s");
define_webjump("p", "http://docs.python.org/search.html?q=%s");
define_webjump("s", "https://www.ixquick.com/do/search?q=%s");

// the default page for new buffers.
homepage = "about:blank";

// remember session
require("session");
session_auto_save_auto_load = "prompt";

// no history
session_pref('browser.history_expire_days', -1);
url_completion_use_history = false;

// completions
url_completion_use_webjumps = true;
url_completion_use_bookmarks = true;

// external programs for handling various mime types.
external_content_handlers.set("application/pdf", "acroread");

// view source in your editor.
editor_shell_command="/usr/bin/emacs -q";
view_source_use_external_editor = true;

// passwords
session_pref("signon.rememberSignons", true);
session_pref("signon.expireMasterPassword", true);
session_pref("signon.SignonFileName", "signons.txt");

// remember form values
session_pref("browser.formfill.enable", true);

// disable scrollbars
function disable_scrollbars (buffer) {
    buffer.top_frame.scrollbars.visible = false;
}
add_hook("create_buffer_late_hook", disable_scrollbars);


// autoload caret-mode for visual cursor and region
add_hook("create_buffer_hook", caret_mode_enable);

//
// Shortcuts
//

define_key(content_buffer_normal_keymap, "y", "copy",
           $browser_object = browser_object_dom_node);

define_key(content_buffer_normal_keymap, "C-x u", "view-source");


//
// Extensions
//

//session_pref('extensions.checkCompatibility', false);
//session_pref("xpinstall.whitelist.required", false);
user_pref("extensions.checkUpdateSecurity", true);


/* firebug */
define_variable("firebug_url",
    "http://getfirebug.com/releases/lite/1.2/firebug-lite-compressed.js");

function firebug (I) {
    var doc = I.buffer.document;
    var script = doc.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', firebug_url);
    script.setAttribute('onload', 'firebug.init();');
    doc.body.appendChild(script);
}
interactive("firebug", "open firebug lite", firebug);


// adblock
require("adblockplus");
try { require("dom-inspector"); } catch (e) {}

/* noscript */
//require("noscript");


///
/// Auto-hide Minibuffer
///

var minibuffer_autohide_timer = null;
var minibuffer_autohide_message_timeout = 3000; //milliseconds to show messages
var minibuffer_mutually_exclusive_with_mode_line = true;

function hide_minibuffer (window) {
    window.minibuffer.element.collapsed = true;
    if (minibuffer_mutually_exclusive_with_mode_line && window.mode_line)
        window.mode_line.container.collapsed = false;
}

function show_minibuffer (window) {
    window.minibuffer.element.collapsed = false;
    if (minibuffer_mutually_exclusive_with_mode_line && window.mode_line)
        window.mode_line.container.collapsed = true;
}

add_hook("window_initialize_hook", hide_minibuffer);
// for_each_window(hide_minibuffer); // initialize existing windows


var old_minibuffer_restore_state = (old_minibuffer_restore_state ||
                                    minibuffer.prototype._restore_state);
minibuffer.prototype._restore_state = function () {
    if (minibuffer_autohide_timer) {
        timer_cancel(minibuffer_autohide_timer);
        minibuffer_autohide_timer = null;
    }
    if (this.current_state)
        show_minibuffer(this.window);
    else
        hide_minibuffer(this.window);
    old_minibuffer_restore_state.call(this);
};

var old_minibuffer_show = (old_minibuffer_show || minibuffer.prototype.show);
minibuffer.prototype.show = function (str, force) {
    var w = this.window;
    show_minibuffer(w);
    old_minibuffer_show.call(this, str, force);
    if (minibuffer_autohide_timer)
        timer_cancel(minibuffer_autohide_timer);
    minibuffer_autohide_timer = call_after_timeout(
        function () { hide_minibuffer(w); },
        minibuffer_autohide_message_timeout);
};

var old_minibuffer_clear = (old_minibuffer_clear || minibuffer.prototype.clear);
minibuffer.prototype.clear = function () {
    if (minibuffer_autohide_timer) {
        timer_cancel(minibuffer_autohide_timer);
        minibuffer_autohide_timer = null;
    }
    if (! this.current_state)
        hide_minibuffer(this.window);
    old_minibuffer_clear.call(this);
};
